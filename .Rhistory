shiny::runApp()
shiny::runApp()
install.packages("ggthemr")
install.packages("ggthmer")
devtools::install_github('cttobin/ggthemr')
runApp()
install.packages("shinymaterial")
runApp()
install.packages("rsconnect")
runApp()
?material_text_box
runApp()
library(httr)
library(jsonlite)
library(xml2)
library(urltools)
library(myvariant)
library(magrittr)
library(plyr)
library(dplyr)
# --------------------
# Funciones auxiliares
# --------------------
chr <- "7"
pos <- "140453136"
ref <- "A"
alt <- "T"
format_g <- function(chr, pos, ref, alt){
paste0(chr, ":", pos, ref, ">", alt)
}
format_g_row <- function(chr, pos, ref, alt){
if(ref != "-"){
if(alt == "-"){
#delecion
variant <- paste0("del")
}
else{
#snp
variant <- paste0(ref, ">", alt)
}
}
else{
#insercion
variant <- paste0("ins", alt)
}
gsub(" ", "", paste0(chr, ":g.", pos, variant))
}
hgvs_g <- format_g(chr, pos, ref, alt)
hgvs_g
d <- getVariant(hgvs_g)[[1]]
chr <- "chr7"
pos <- "140453136"
ref <- "A"
alt <- "T"
format_g <- function(chr, pos, ref, alt){
paste0(chr, ":", pos, ref, ">", alt)
}
format_g_row <- function(chr, pos, ref, alt){
if(ref != "-"){
if(alt == "-"){
#delecion
variant <- paste0("del")
}
else{
#snp
variant <- paste0(ref, ">", alt)
}
}
else{
#insercion
variant <- paste0("ins", alt)
}
gsub(" ", "", paste0(chr, ":g.", pos, variant))
}
# Function: get_variant_data
# Descripción: Función para obtener la información de la variante
# Parámetros
# chr: cromosoma
# pos: posición
# ref: alelo de referencia
# alt: alelo alternativo
get_variant_data <- function(chr, pos, ref, alt){
hgvs_g <- format_g(chr, pos, ref, alt)
d <- getVariant(hgvs_g)[[1]]
gnomad_af_exome  <- d[['gnomad_exome']][['af']]
if(!is.null(gnomad_af_exome)) {
gnomad_af_exome  <- ldply(gnomad_af_exome, data.frame)
names(gnomad_af_exome) <- c("id", "value")
gnomad_af_exome$summary <- paste0(gnomad_af_exome$id, ": ", gnomad_af_exome$value)
gnomad_af_exome <- paste0(gnomad_af_exome$summary, collapse = " | ")
}
gnomad_af_genome <- d[['gnomad_genome']][['af']]
if(!is.null(gnomad_af_genome)) {
gnomad_af_genome  <- ldply(gnomad_af_genome, data.frame)
names(gnomad_af_genome) <- c("id", "value")
gnomad_af_genome$summary <- paste0(gnomad_af_genome$id, ": ", gnomad_af_genome$value)
gnomad_af_genome <- paste0(gnomad_af_genome$summary, collapse = " | ")
}
gene <- d[['clinvar']][['gene']][['symbol']]
hgvs_c <- d[['clinvar']][['hgvs']][['coding']]
clinvar_entries <- d[['clinvar']][['rcv']]
clinvar_entries <- ldply (clinvar_entries, data.frame)[,c("clinical_significance", "name", "last_evaluated",
"origin", "conditions.name")]
clinvar_entries <- clinvar_entries[clinvar_entries$origin == "germline",]
clinvar_entries$disease <- apply(clinvar_entries, 1, function(row){
if (is.na(row[['name']])){
row[['conditions.name']]
}else if (is.na(row[['conditions.name']])){
row[['name']]
}else{
#ambas
paste(row[['name']], row[['conditions.name']], sep = " | ")
}
})
clinvar_entries$name <- NULL
clinvar_entries$conditions.name <- NULL
clinvar_entries$origin <- NULL
clinvar_entries_2 <- clinvar_entries %>% group_by(clinical_significance)  %>% summarise(le = paste(unique(last_evaluated[!is.na(last_evaluated)]), collapse = "|" ),
dis = paste(unique(disease[!is.na(disease)]), collapse = "|"),
n = n())
clinvar_entries_2$summary <- paste0(clinvar_entries_2$clinical_significance, " (", clinvar_entries_2$n, ") [",
clinvar_entries_2$le, "] [", clinvar_entries_2$dis, "]")
clinvar_entries_2$n <- NULL
clinvar_entries_2$le <- NULL
clinvar_entries_2$dis <- NULL
clinvar_entries_2$clinical_significance <- NULL
clinvar_entries <- paste0(clinvar_entries_2$summary, collapse = " | ")
data.frame(gene = gene, hgvsc = hgvs_c, gnomad_exome = gnomad_af_exome, gnomad_genome = gnomad_af_genome, clinvar = clinvar_entries)
}
hgvs_g <- format_g(chr, pos, ref, alt)
d <- getVariant(hgvs_g)[[1]]
d
chr <- "2"
pos <- "179469737"
ref <- "C"
alt <- "T"
hgvs_g <- format_g(chr, pos, ref, alt)
d <- getVariant(hgvs_g)[[1]]
format_g <- function(chr, pos, ref, alt){
paste0("chr", chr, ":", pos, ref, ">", alt)
}
format_g_row <- function(chr, pos, ref, alt){
if(ref != "-"){
if(alt == "-"){
#delecion
variant <- paste0("del")
}
else{
#snp
variant <- paste0(ref, ">", alt)
}
}
else{
#insercion
variant <- paste0("ins", alt)
}
gsub(" ", "", paste0(chr, ":g.", pos, variant))
}
hgvs_g <- format_g(chr, pos, ref, alt)
hgvs_g
d <- getVariant(hgvs_g)[[1]]
d
d$dbsnp$gene
length(d$dbsnp$gene)
d$dbsnp$gene[1]
d$dbsnp$gene[1]$symbol
d$dbsnp$gene[1]
names(d$dbsnp$gene[1])
d$dbsnp$gene[1]
d$dbsnp$gene[[1]]
d$dbsnp$gene[[1]]$symbol
runApp()
?material_button
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d
140453136
d$dbsnp$gene[[1]]
d$dbsnp$gene[[1]]$symbol
runApp()
runApp()
runApp()
runApp()
runApp()
chr <- "7"
pos <- "140453136"
ref <- "A"
alt <- "T"
hgvs_g <- format_g(chr, pos, ref, alt)
d <- getVariant(hgvs_g)[[1]]
print(hgvs_g)
var <- as.character(d$dbsnp$gene[[1]]$symbol)
var
d$dbsnp$gene[[1]]$symbol
d <- getVariant(hgvs_g)[[1]]
d
d$dbsnp
d$dbsnp$gene
d$dbsnp$gene[[1]]
d$dbsnp$gene[[1]]$symbol
d$dbsnp$gene$symbol
length(d$dbsnp)
length(d$dbsnp$gene)
runApp()
d$clinvar
d$clinvar$omim
d$clinvar$cytogenic
d$clinvar$rcv
d$snpeff$ann$feature_type
d$dbsnp
runApp()
runApp()
runApp()
d$dbsnp$allele_origin
runApp()
d$civic
d$vcf
d$snpeff
runApp()
d$snpeff$ann$feature_id
d$snpeff$ann$feature_type
d$snpeff$ann$putative_impact
d$snpeff$ann$putative_impact
d$snpeff$ann$transcript_biotype
runApp()
chr <- "7"
pos <- "140453136"
ref <- "A"
alt <- "T"
hgvs_g <- format_g(chr, pos, ref, alt)
d <- getVariant(hgvs_g)[[1]]
d$snpeff$ann$feature_type
d$snpeff$ann$effect
d$snpeff$ann$putative_impact
runApp()
d$dbsnp$vartype
d$dbsnp$var_subtype
d$dbsnp$vartype
d$allele_origin
d$civic
d$cadd
shiny::runApp()
d$clinvar
chr <- "7"
pos <- "140453136"
ref <- "A"
alt <- "T"
hgvs_g <- format_g(chr, pos, ref, alt)
d <- getVariant(hgvs_g)[[1]]
d$clinvar
d[[1]]
d[[1]]['clinvar']
d$clinvar
runApp()
d$clinvar
d$clinvar[[1]]
d$clinvar[[2]]
d$clinvar[[3]]
d$clinvar
d[[1]]
d[[1]]$civic
d$civic$description
runApp()
d$civic$evidence_items
runApp()
d$civic$evidence_items[[1]]
d$civic$evidence_items[[1]]$drugs
d$civic$evidence_items[[1]]$drugs[[1]]
d$civic$evidence_items[[1]]$drugs[[1]]$name
runApp()
runApp()
runApp()
runApp()
d$clinvar
runApp()
d$snpedia
d$docm
d$emv
d$exac_nontcga
runApp()
runApp()
d$clinvar[[1]]
d$clinvar$rcv[[1]]
as.data.frame(d$clinvar$rcv[[1]])
runApp()
rsconnect::setAccountInfo
rsconnect::setAccountInfo()
rsconnect::setAccountInfo(name='cristianrohr',
token='A3C8D291AB31B2A2BC590F5D9F56F35B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='cristianrohr',
token='A3C8D291AB31B2A2BC590F5D9F56F35B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='cristianrohr',
token='A3C8D291AB31B2A2BC590F5D9F56F35B',
secret='fSZm4yRFH01xXQn+BTLsW9Bb3uQzxFHcgoOMo6Yh')
library(rsconnect)
deployApp()
shiny::runApp()
options(repos = BiocInstaller::biocinstallRepos())
> getOption("repos")
options(repos = BiocInstaller::biocinstallRepos())
install.packages("BiocInstaller")
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
runApp()
shiny::runApp()
shiny::runApp()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicAlignments")
shiny::runApp()
d$clinvar
chr <- "7"
pos <- "140453136"
ref <- "A"
alt <- "T"
hgvs_g <- format_g(chr, pos, ref, alt)
d <- getVariant(hgvs_g)[[1]]
print(hgvs_g)
d$clinvar
d$clinvar$rcv[[1]]
as.data.frame(d$clinvar$rcv[[1]])
runApp()
